" Pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

"Better matching
runtime macros/matchit.vim

" Orig
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

" General
syntax on
filetype plugin indent on

" Colorscheme and gui options
if has("gui_running")
  color mustang
  set guioptions-=T  "remove toolbar
  set guioptions-=m  "remove menu
  set guioptions-=L  "Do not create left scrollbar on vsplit
  if has("win32")
    set guifont=Courier_New:h10
endif
else
  color torte
endif
set background=dark
hi StatusLine guibg=#1BB5E0 guifg=black ctermbg=blue ctermfg=black
"colorscheme solarized

set fileformats=unix,dos        " Use unix as first fileformat to make vimrc cross platform
set writebackup                 " Have a backup file during edit session
set nobackup                    " Delete backup file when session is complete
set noswapfile                  " Don't use a swap file
set shiftwidth=2                " Conventions for tabs
set softtabstop=2
set tabstop=2
set expandtab
                                "Don't expand tabs to spaces for makefiles
autocmd filetype makefile,Makefile,*.mk,*.mak setlocal noet
autocmd FileType qf wincmd J    "Open quickfix window at the bottom & span full
set cino=(0                     " c indentation options for aligning func parameters etc with previous line
set smartindent
set incsearch                   " Search as you type
set hls                         " Highlightfound matches
set clipboard=unnamed           " use system clipboard for yanking and putting
set virtualedit=all             " Allow cursor to move past last character
set hl=l:Visual                 " Highlight visual mode selection
set showmatch                   " set show matching parenthesis
set bs=indent,eol,start         " Backspace over everything in insert mode
set ignorecase                  " ignore case if search pattern is all lowercase,
set smartcase                   " case-sensitive otherwise
set hidden                      " Hide buffers instead of closing so that buffers can be switched without being forced to write
set history=1000                " remember more commands and search history
set undolevels=1000             " use many muchos levels of undo
set title                       " change the terminal's title
set showmode                    " always show what mode we're currently editing in
set relativenumber              " always show line numbers by default
"Switch back to absolute numbers when focus to current buffer or window is lost
au FocusLost * set number
au WinEnter * set relativenumber
au FocusGained * set relativenumber
au WinLeave * set number
set encoding=utf-8
set listchars=tab:»»,trail:·,extends:# " Show trailing whitespace & # for lines going offscreen
set list
set pastetoggle=<F2>            "Press F2 before pasing block of data to avoid auto indentation
set scrolloff=3                 "Start scrolling 3 lines before the bottom
set wrap
set textwidth=79
set formatoptions=cqrn1
autocmd FileType cpp,c,cxx,h,hpp,python,sh  setlocal colorcolumn=80
set cursorline                  "Highlight the line where cursor is current present
set cursorcolumn                "Highlight the column where cursor is current present
set visualbell
set splitright  "New split opens on right side

"unix like mode for tab completion while opening files
set wildmode=longest,list:longest,list:full
set wildmenu "list of files while using b tabnew e etc
set wildignore+=*~,*.swp,tags,*.bak,*.pyc,*.class "ignore some file extensions while completing names by tab

"Move viminfo and undo files to separate dirs. Also saving undo files makes undo info persist across sessions
set viminfo='100,n$HOME/vimtmp/.viminfo
set undodir=$HOME/vimtmp
set undofile

"Remove some unneeded prompts
set shortmess=atI

"folding settings
set foldmethod=indent   "fold based on syntax
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use
set foldcolumn=2
set foldnestmax=4
"Then you can toggle folding with za. You can fold everything with zM and unfold everything with zR. zm and zr can be used to get those folds just right. Always remember the almighty help file at help :folding if you get stuck.zc and zo operate only for current fold

"Fold column colors. default is too bright
hi FoldColumn      guifg=#93b3a3 guibg=#3f4040

"Search tags file upwards recursively
set tags=./tags;/

"Set synmaxcol to a low number to avoid slow cursor movement on long lines
set synmaxcol=300

" Vim indent guides
let g:indent_guides_guide_size = 1

" General Key Mappings

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Tip: Use <C-w> + upper case hjkl to move splits

" Easy buffer movement
map <C-Tab> :MBEbn<CR>
map <C-S-Tab> :MBEbp<CR>
map <C-PageUp> :bfirst<CR>
map <C-PageDown> :blast<CR>

"Toggle line numbers
nmap \l :call NumberToggle()<CR>
"Toggle paste mode
nmap \o :set paste!<CR>

"Clear search highlighting by pressing ,/
nmap <silent> <Leader>/ :nohlsearch<CR>

"Toggle highlighting with <Leader>c command
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Map ctrl+F12 to generate ctags
map <C-F12> :!ctags -R --sort=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"Map Alt+] to open the tag definition in a split window
map <A-]> :sp <CR>:exec("tag ".expand("<cword>"))<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"Ctrl-A/Ctrl-X are taken up windows key bindins for select all and cut
"so remap alt-a and alt-x to increment/decrement numbers
:nnoremap <A-a> <C-a>
:nnoremap <A-x> <C-x>

"Grep for word under cursor in current dir recursively and open quicklist window
if(executable("ag"))
  set grepprg=ag\ --nogroup\ --nocolor
  :nnoremap <Leader>g :silent AsyncGrep <C-r><C-w> * <CR>:copen<CR>
  "Grep for word under cursor in custom dir recursively and open quicklist window
  :nnoremap <Leader>gc :silent AsyncGrep <C-r><C-w> <C-R>=getcwd()<CR>/**
  "Grep for word under cursor in current file and open quicklist window
  :nnoremap <Leader>gf :silent AsyncGrep <C-r><C-w> % <CR>:copen<CR>
  "Grep for word under cursor in current project root and open quicklist window
  :nnoremap <Leader>gp :ProjectRootExe silent AsyncGrep <C-r><C-w> * <CR>:copen<CR>
else
  set grepprg=grep
  :nnoremap <Leader>g :silent AsyncGrep -nr --mmap --include=\*.{c,cpp,h,xml} <C-r><C-w> * <CR>:copen<CR>
  "Grep for word under cursor in custom dir recursively and open quicklist window
  :nnoremap <Leader>gc :silent AsyncGrep -nr --mmap --include=\*.{c,cpp,h,xml} <C-r><C-w> <C-R>=getcwd()<CR>/**
  "Grep for word under cursor in current file and open quicklist window
  :nnoremap <Leader>gf :silent AsyncGrep -nr <C-r><C-w> % <CR>:copen<CR>
  "Grep for word under cursor in current project root and open quicklist window
  :nnoremap <Leader>gp :ProjectRootExe silent AsyncGrep -nr --mmap --include=\*.{c,cpp,h,xml} <C-r><C-w> * <CR>:copen<CR>
endif

"Filter file for search pattern and add matches in a scratch buffer
nnoremap <silent> <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:setlocal bt=nofile<CR>:put! a<CR>

"Open a scratch buffer
nnoremap <Leader>s :new<CR>:setlocal bt=nofile<CR>

"Status
set statusline=%F%m%r%h%w\  "filename
"set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
"set statusline+=%{&ff}] "file format
set statusline+=%m      "modified flag
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines

set laststatus=2

" Plugins

"#Plugin: MiniBufExplorer
"Let mbe cycle around when switching buffers
let g:miniBufExplCycleArround=1
"Display cwd in mbe status line
let g:miniBufExplStatusLineText='%{getcwd()}'
"always open mbe by default
let g:miniBufExplBuffersNeeded = 1

"#Plugin: Tagbar
"Uncomment next line to open on left side
"let g:tagbar_left=1
"Toggle tagbar
nnoremap <Leader>tg :TagbarToggle<CR>

" Open and close the NERD_tree.vim separately 
nmap <F9>  :NERDTreeToggle<CR> 

"Source Insight type IDE
nmap <F8>   :TagbarToggle<CR>:NERDTreeToggle<CR>

"#Plugin: gtags
"Don't jump to result automatically
let g:Gtags_No_Auto_Jump = 1
"key mappings
"Go to definition under cursor
nmap <Leader>f :Gtags<CR><CR>
"Go to reference of word under cursor
nmap <Leader>fr :Gtags -r<CR><CR>
"Update gtags
nmap <Leader>fu :ProjectRootExe !gtags

"#Plugin:Vinarise. For hex editing
"Disable auto detection for now as it is giving some error
"let g:vinarise_enable_auto_detect = 1

"#Plugin: Rainbow parentheses
"Toggle
nnoremap <Leader>r :RainbowParenthesesToggleAll<CR>

"#Plugin: CtrlP
"Use MRU + file find + buffer mode for CtrlP by default
"let g:ctrlp_cmd = 'CtrlPMixed'
"Set .p4config as a marker to find p4 sync'ed builds' root
let g:ctrlp_root_markers = ['.p4config']
let g:ctrlp_extensions = ['tag']

"#Plugin: vim-projectroot
"Set .p4config as a marker to find p4 sync'ed builds' root
let g:rootmarkers = ['.p4config']

"#Plugin: omnicppcomplete
let OmniCpp_GlobalScopeSearch   = 1
let OmniCpp_NameSpaceSearch     = 2
let OmniCpp_DisplayMode         = 1
let OmniCpp_ShowScopeInAbbr     = 1 " do not show namespace in pop-up
let OmniCpp_ShowPrototypeInAbbr = 1 " show prototype in pop-up
let OmniCpp_ShowAccess          = 1 " show access in pop-up
let OmniCpp_SelectFirstItem     = 1 " select first item in pop-up
let OmniCpp_MayCompleteDot      = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow    = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope    = 1 " autocomplete after ::
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

"cscope
let g:cscope_cmd = "cscope"

"Functions

"Toggle line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
